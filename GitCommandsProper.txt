Git Details

1. The things we are doing on Git is called "Devops"
2. Git have 4 stages
3. A file from our computer to cloud goes through 4 stages  
        a) Working directory
        b) Staging
        c) Local repository
        d) cloud or github
    
4. Working directory is the place were we work our file our computer
5. Ye hume cloud par dalna hai jo github hai.
6. Staging and Local Repository ye dono hiddden files hai
7. To start the git process ==> git init
7. WD se staging ke liye ==> git add . 
8. staging se Local Repository ke liye ===> git commit -m "added files"
9. Local Repository se GitHub ke liye ===> git push

a) git init 
    i) Process start karne ke liye

b) git add . or git add filename
    i) To add files to the staging
    ii) git add . ===> to add all files to the staging
    iii) git add filename ===> to add specific file to staging

c) git commit -m "added files"
    i) to transfer files to local repository

d) git push
    i) to transfer files to cloud/github

e) git status
    i) Agar ye command git init ke pahale likha to nai chalega..error aayega
    ii) lekin git init ke baad git status likha to kuch dikhayega jaise untracked files jo red color me hoga
    iii) abhi git add . ya git add filename ===> ye likhne par file staging par add hoga
    iv) abhi jo red me files the wo green me ho jaege ==> means file abhi track ho rai hai
    v) Now git commit -m "files added" ===> abhi staging se local repo par daal rai hai
    vi) abhi modified hua hoga to likhke aayega agar git add . ke baad kuch change kiya to git add. use karenge
    vii) fir git commi -m "added files" ==> abhi fir file wagare add karenge ==> abhi srf ek file daalna hai to git add filename karke add karenge

f) git log
    i) yaha samjega ki kite baar commit kiya hai 
    ii) exist ke liye "q" use karenge

g) git show HEAD
    i) yaha latest commit dikhayega
    ii) abhi hume file me kuch change kiya

h) git diff
    i) eise samjega kya change hua hai working directory me liye

I) git diff filename
    i) agar srf ek file me changes dekhene hai to ye command use karenge

j) git command for different scenarios

    a) Scenario 1
        i) working directory –ko ---- same as last commit karna hai
        ii) command ==> git checkout HEAD filename
        iii) HEAD ==>  means last jo commit hai 
        iv) filename ==> jo bhi hai wo likho
        v) Ye process se humme
                W.D. ===> staging ===> local repo ===> cloud
                10+5 ===>   10+5  ===>  10 ==========> 10
        vi) Ye process se humme
                W.D. ===> staging ===> local repo ===> cloud
                10     ===>   10   =====>  10 ==========> 10
        vii) Start the process with git init
        viii) Then ==> git add . ==> to put the file in staging
        ix) Now we don’t want process further with done changes
        x) Want the W.D. same as before without deleting
        xi) Write ==> git checkout HEAD filename
        xii) W.D. will be same as before that new 5 lines added will deleted from W.D.


    b) Scenario 2
        i) staging same as last commit 
        ii) unstage karna hai
        iii) command ==> git reset HEAD filename
        iv) HEAD ==> means last jo commit hai 
        v) filename ==> jo bhi hai wo likho
                W.D. ==> staging ==> local repo ==> cloud
                10+5 ==> 10+5   ====>      10 ====> 10
        vi) Esse hum niche jaisa karna hai
                W.D. ==> staging ==> local repo ==> cloud
                10+5 ==> 10   =====>     10 ======> 10
        vii) Start the process with git init
        viii) Then ==> git add . ==> to put the file in staging
        ix) Now we don’t want process further with done changes
        x) Want to unstage the process
        xi) Write  git reset HEAD filename
        xii) Changes will be still present in W.D. , as we have done staging we want to unstage it.
        xiii) See the changes with git diff
        xiv) Will see the green line on the left side of the unstage code.
        xv) We will get following message on unstage
                Unstaged changes after reset:
                M       git3.js

    c) Scenario 3
        i) removing the commit to roll back to spect commit
        ii) uncommit karna hai
        iii) command  git reset 4586e3d
        iv) yaha ye code git log karke aaya 
        v) jo latest wala hai sabse niche uske first 7 letter and number
        vi) filename  jo bhi hai wo likho
                W.D. == staging  local repo cloud
                10+5 == 10+5   = 10+5 ===  10
        vii) Esse hum niche jaisa karna hai
                W.D. == staging  local repo cloud
                10+5 == 10+5 ==      10 ===  10
        viii) Start the process with git init
        ix) Then  git add .  git commit -m “added code” to put the file in local repo
        x) Now we don’t want process further with done changes
        xi) Want to uncommit the process
        xii) Write  git reset cf91dab
        xiii) Changes will be done in commit, we will uncommit the code, uncommit karne par humme niche wala msg aayega
                Unstaged changes after reset:
                M       git3.js

K) Branching
    
    1) There was already 100 line code on the git hub.
    2) Rahul have pull the code from git hub and added more 30 lines in that code.
    3) Now Rahul wants to push that code to git hub.
    4) Went the Rahul push the code to the git hub.
    5) Code on git hub becomes of 130 lines.
    6) Therefore New code from Rahul W.D. will be of no use 
    7) Even Other 2 peoples pull will be of new use
    8) All have to pull new code lines from git hub.








    

